#ifndef TreeNodeDefine
#define TreeNodeDefine(x)
#endif

#ifndef OpcodeDefine
#define OpcodeDefine(x, s)
#endif

#ifndef CastTypeDefine
#define CastTypeDefine(x)
#endif

//按需取用，按需增加

// Node
TreeNodeDefine(ND_CompUnit)
TreeNodeDefine(ND_Identifier)
TreeNodeDefine(ND_BType)
TreeNodeDefine(ND_FuncType)
TreeNodeDefine(ND_VarDecl)
TreeNodeDefine(ND_VarDef)
TreeNodeDefine(ND_VarDefList)
TreeNodeDefine(ND_ArrayIndexList)
TreeNodeDefine(ND_InitVal)
TreeNodeDefine(ND_FuncDef)
TreeNodeDefine(ND_FuncCall)
TreeNodeDefine(ND_FuncFParam)
TreeNodeDefine(ND_FuncFParams)
TreeNodeDefine(ND_NumList)
TreeNodeDefine(ND_Block)
TreeNodeDefine(ND_BlockItem)
TreeNodeDefine(ND_BlockItemList)
TreeNodeDefine(ND_Decl)
TreeNodeDefine(ND_Stmt)
TreeNodeDefine(ND_AssignStmt)
TreeNodeDefine(ND_IfStmt)
TreeNodeDefine(ND_WhileStmt)
TreeNodeDefine(ND_BreakStmt)
TreeNodeDefine(ND_ContinueStmt)
TreeNodeDefine(ND_ReturnStmt)
TreeNodeDefine(ND_LVal)
TreeNodeDefine(ND_LValExpList)
TreeNodeDefine(ND_Exp)
TreeNodeDefine(ND_PrimaryExp)
TreeNodeDefine(ND_UnaryExp)
TreeNodeDefine(ND_BinaryExp)
TreeNodeDefine(ND_BinaryOp)
TreeNodeDefine(ND_FuncRParams)
TreeNodeDefine(ND_IntegerLiteral) 
// TreeNodeDefine(ND_AssignExp)
// TreeNodeDefine(ND_VariableRef)
// TreeNodeDefine(ND_TypeCast)
// TreeNodeDefine(ND_StringLiteral)

//Binary Opcode
OpcodeDefine(Add,    "add")
OpcodeDefine(Sub,    "sub")
OpcodeDefine(Mul,    "mul")
OpcodeDefine(Div,    "div")
OpcodeDefine(Mod,    "mod")
OpcodeDefine(Lt,     "lt")
OpcodeDefine(Gt,     "gt")
OpcodeDefine(Le,     "le")
OpcodeDefine(Ge,     "ge")
OpcodeDefine(Eq,     "eq")
OpcodeDefine(Ne,     "ne")
OpcodeDefine(Land,   "and")
// OpcodeDefine(Lor,    "or")
OpcodeDefine(Lxor,   "xor")
OpcodeDefine(And,    "and")
OpcodeDefine(Or,     "or")
OpcodeDefine(Xor,    "xor")
//Unary Opcode
OpcodeDefine(Lnot,   "not")
OpcodeDefine(Neg,    "neg")
OpcodeDefine(Pos,    "pos")

CastTypeDefine(INTEGER)
CastTypeDefine(ARRAY)
CastTypeDefine(INVALID)

#undef OpcodeDefine
#undef CastTypeDefine
#undef TreeNodeDefine